diff --git a/contracts/Comet.sol b/contracts/Comet.sol
index 20197e5..f82ec10 100644
--- a/contracts/Comet.sol
+++ b/contracts/Comet.sol
@@ -249,7 +249,7 @@ contract Comet is CometCore {
     /**
      * @dev Checks and gets the packed asset info for storage
      */
-    function _getPackedAsset(AssetConfig[] memory assetConfigs, uint i) internal view returns (uint256, uint256) {
+    function _getPackedAsset(AssetConfig[] memory assetConfigs, uint i) virtual internal view returns (uint256, uint256) {
         AssetConfig memory assetConfig;
         if (i < assetConfigs.length) {
             assembly {
@@ -308,12 +308,12 @@ contract Comet is CometCore {
         }
     }

-    /**
+    /**×³
      * @notice Get the i-th asset info, according to the order they were passed in originally
      * @param i The index of the asset info to get
      * @return The asset info object
      */
-    function getAssetInfo(uint8 i) public view returns (AssetInfo memory) {
+    function getAssetInfo(uint8 i) virtual public view returns (AssetInfo memory) {
         if (i >= numAssets) revert BadAsset();

         uint256 word_a;
@@ -394,7 +394,7 @@ contract Comet is CometCore {
     /**
      * @dev Determine index of asset that matches given address
      */
-    function getAssetInfoByAddress(address asset) internal view returns (AssetInfo memory) {
+    function getAssetInfoByAddress(address asset) virtual internal view returns (AssetInfo memory) {
         for (uint8 i = 0; i < numAssets; i++) {
             AssetInfo memory assetInfo = getAssetInfo(i);
             if (assetInfo.asset == asset) {
@@ -415,7 +415,7 @@ contract Comet is CometCore {
     /**
      * @dev Accrue interest (and rewards) in base token supply and borrows
      **/
-    function accrueInternal() internal {
+    function accrueInternal() virtual internal {
         uint40 now_ = getNowInternal();
         uint timeElapsed = now_ - lastAccrualTime;
         if (timeElapsed > 0) {
@@ -755,8 +755,8 @@ contract Comet is CometCore {
     /**
      * @dev Whether user has a non-zero balance of an asset, given assetsIn flags
      */
-    function isInAsset(uint16 assetsIn, uint8 assetOffset) internal pure returns (bool) {
-        return (assetsIn & (uint16(1) << assetOffset) != 0);
+    function isInAsset(uint16 assetsIn, uint8 assetOffset) virtual internal view returns (bool) {
+        return (assetsIn & (uint8(1) << assetOffset) != 0);
     }

     /**
@@ -767,7 +767,7 @@ contract Comet is CometCore {
         address asset,
         uint128 initialUserBalance,
         uint128 finalUserBalance
-    ) internal {
+    ) virtual internal {
         AssetInfo memory assetInfo = getAssetInfoByAddress(asset);
         if (initialUserBalance == 0 && finalUserBalance != 0) {
             // set bit for asset
@@ -954,7 +954,7 @@ contract Comet is CometCore {
      * @param asset The asset to transfer
      * @param amount The quantity to transfer
      */
-    function transferAssetFrom(address src, address dst, address asset, uint amount) external {
+    function transferAssetFrom(address src, address dst, address asset, uint amount) virtual external {
         return transferInternal(msg.sender, src, dst, asset, amount);
     }

@@ -1257,7 +1257,7 @@ contract Comet is CometCore {
     /**
      * @notice Fallback to calling the extension delegate for everything else
      */
-    fallback() external payable {
+/*    fallback() external payable {
         address delegate = extensionDelegate;
         assembly {
             calldatacopy(0, 0, calldatasize())
@@ -1267,5 +1267,5 @@ contract Comet is CometCore {
             case 0 { revert(0, returndatasize()) }
             default { return(0, returndatasize()) }
         }
-    }
+    } */
 }
